---
export const prerender = false;
// cache the page for 1 day
Astro.response.headers.set('CDN-Cache-Control', 'public, max-age=86400, must-revalidate');

import { getEntry } from 'astro:content';
import RankedList from '../components/spotify/RankedList.astro';
import Layout from '../layouts/Layout.astro';
import {
  spotifyPlaylists,
  spotifyTopArtists,
  spotifyTopTracks,
  getSpotifyAccessToken,
} from '../libs/spotify';
import Playlists from '../components/spotify/Playlists.astro';
import TimeFilters from '../components/spotify/TimeFilters.svelte';

const content = await getEntry('spotify', 'content');
const { access_token } = await getSpotifyAccessToken();

// TODO: think about only fetching the data that is visible to the user
// fetch other data when the user interacts with the page
const [
  longArtists,
  mediumArtists,
  shortArtists,
  longTracks,
  mediumTracks,
  shortTracks,
  userPlaylists,
] = await Promise.all([
  spotifyTopArtists('long_term', access_token).then((response) => response.json()),
  spotifyTopArtists('medium_term', access_token).then((response) => response.json()),
  spotifyTopArtists('short_term', access_token).then((response) => response.json()),
  spotifyTopTracks('long_term', access_token).then((response) => response.json()),
  spotifyTopTracks('medium_term', access_token).then((response) => response.json()),
  spotifyTopTracks('short_term', access_token).then((response) => response.json()),
  spotifyPlaylists(access_token).then((response) => response.json()),
]);

const artists = {
  long: longArtists,
  medium: mediumArtists,
  short: shortArtists,
};

const tracks = {
  long: longTracks,
  medium: mediumTracks,
  short: shortTracks,
};

const playlists = userPlaylists;
---

<Layout title='Spotify - Christoph Saile'>
  <div>
    <h1>{content.data.title}</h1>
    <p>{content.data.description}</p>
    <section class='ranked-section'>
      <TimeFilters client:only='svelte' title='Top Artists' />
      <RankedList active={true} timeRange='short_term' artists={artists.short.items} />
      <RankedList active={false} timeRange='medium_term' artists={artists.medium.items} />
      <RankedList active={false} timeRange='long_term' artists={artists.long.items} />
    </section>
    <section class='ranked-section'>
      <TimeFilters client:only='svelte' title='Top Tracks' />
      <RankedList active={true} timeRange='short_term' tracks={tracks.short.items} />
      <RankedList active={false} timeRange='medium_term' tracks={tracks.medium.items} />
      <RankedList active={false} timeRange='long_term' tracks={tracks.long.items} />
    </section>
    <section>
      <Playlists playlists={playlists.items} />
    </section>
  </div>
</Layout>
